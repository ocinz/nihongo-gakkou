// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime? @default(now())
  accounts      Account[]
  material      Material[]
  enrichment    Enrichment[]
  practice      Practice[]
  role          Role?    @relation(fields: [roleId], references: [id])
  roleId        String?  @db.Uuid
}
model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique 
  authorities Authority[] 
  users       User[]      
}
model Authority {
  id        Int    @id @default(autoincrement())
  canCreate Boolean @default(false)
  canRead   Boolean @default(false)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)
  role      Role   @relation(fields: [roleId], references: [id])
  menu      Menu   @relation(fields: [menuId], references: [id])
  roleId    String @db.Uuid
  menuId    String @db.Uuid
  roleName    String 
  menuPath    String 
}
model Menu {
  id          String      @id @default(uuid()) @db.Uuid
  name        String 
  path        String
  authority   Authority[]
}
model Account {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Material {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar()
  content     String      @db.Text
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.Uuid
  level       Level
}
model Enrichment {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar()
  content     String      @db.Text
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.Uuid
}
model Question {
  id                   Int         @id @default(autoincrement())
  questionStatement    String      @map("question_statement") @db.Text
  image                String?     
  answer               Answer
  optionA              String      @map("option_a") @default("")
  optionB              String      @map("option_b") @default("")
  optionC              String      @map("option_c") @default("")
  optionD              String      @map("option_d") @default("")
}

model Practice {
  id    Int     @id @default(autoincrement())
  level Level   
  user User     @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

enum Level {
  N1
  N2
  N3 
  N4
  N5
}

enum Answer {
  A
  B
  C
  D
}